{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name puzzle.model, :imports nil, :requires nil, :uses nil, :defs {createTile {:protocol-inline nil, :meta {:file "C:\\Workspaces\\Tom\\clojurescript_puzzle\\src\\puzzle\\model.cljs", :line 13, :column 7, :end-line 13, :end-column 17, :arglists (quote ([x y]))}, :name puzzle.model/createTile, :variadic false, :file "src\\puzzle\\model.cljs", :end-column 17, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y]))}, flattenVecs {:protocol-inline nil, :meta {:file "C:\\Workspaces\\Tom\\clojurescript_puzzle\\src\\puzzle\\model.cljs", :line 30, :column 7, :end-line 30, :end-column 18, :arglists (quote ([vecs]))}, :name puzzle.model/flattenVecs, :variadic false, :file "src\\puzzle\\model.cljs", :end-column 18, :method-params ([vecs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([vecs]))}, concat2Vectors {:protocol-inline nil, :meta {:file "C:\\Workspaces\\Tom\\clojurescript_puzzle\\src\\puzzle\\model.cljs", :line 22, :column 7, :end-line 22, :end-column 21, :arglists (quote ([list1 list2]))}, :name puzzle.model/concat2Vectors, :variadic false, :file "src\\puzzle\\model.cljs", :end-column 21, :method-params ([list1 list2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([list1 list2]))}, lift2 {:protocol-inline nil, :meta {:file "C:\\Workspaces\\Tom\\clojurescript_puzzle\\src\\puzzle\\model.cljs", :line 35, :column 7, :end-line 35, :end-column 12, :arglists (quote ([func list1 list2]))}, :name puzzle.model/lift2, :variadic false, :file "src\\puzzle\\model.cljs", :end-column 12, :method-params ([func list1 list2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 3, :fn-var true, :arglists (quote ([func list1 list2]))}, excludeFromCollection {:protocol-inline nil, :meta {:file "C:\\Workspaces\\Tom\\clojurescript_puzzle\\src\\puzzle\\model.cljs", :line 51, :column 7, :end-line 51, :end-column 28, :arglists (quote ([vecs coor]))}, :name puzzle.model/excludeFromCollection, :variadic false, :file "src\\puzzle\\model.cljs", :end-column 28, :method-params ([vecs coor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 2, :fn-var true, :arglists (quote ([vecs coor]))}, coords {:name puzzle.model/coords, :file "src\\puzzle\\model.cljs", :line 42, :column 1, :end-line 42, :end-column 12, :meta {:file "C:\\Workspaces\\Tom\\clojurescript_puzzle\\src\\puzzle\\model.cljs", :line 42, :column 6, :end-line 42, :end-column 12}}, combineItemListWithFunc {:protocol-inline nil, :meta {:file "C:\\Workspaces\\Tom\\clojurescript_puzzle\\src\\puzzle\\model.cljs", :line 18, :column 7, :end-line 18, :end-column 30, :arglists (quote ([func list item]))}, :name puzzle.model/combineItemListWithFunc, :variadic false, :file "src\\puzzle\\model.cljs", :end-column 30, :method-params ([func list item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 3, :fn-var true, :arglists (quote ([func list item]))}, size {:name puzzle.model/size, :file "src\\puzzle\\model.cljs", :line 5, :column 1, :end-line 5, :end-column 10, :meta {:file "C:\\Workspaces\\Tom\\clojurescript_puzzle\\src\\puzzle\\model.cljs", :line 5, :column 6, :end-line 5, :end-column 10}}, getFromCollection {:protocol-inline nil, :meta {:file "C:\\Workspaces\\Tom\\clojurescript_puzzle\\src\\puzzle\\model.cljs", :line 44, :column 7, :end-line 44, :end-column 24, :arglists (quote ([vecs coor]))}, :name puzzle.model/getFromCollection, :variadic false, :file "src\\puzzle\\model.cljs", :end-column 24, :method-params ([vecs coor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([vecs coor]))}, dims {:name puzzle.model/dims, :file "src\\puzzle\\model.cljs", :line 8, :column 1, :end-line 8, :end-column 10, :meta {:file "C:\\Workspaces\\Tom\\clojurescript_puzzle\\src\\puzzle\\model.cljs", :line 8, :column 6, :end-line 8, :end-column 10}}, tiles {:name puzzle.model/tiles, :file "src\\puzzle\\model.cljs", :line 57, :column 1, :end-line 57, :end-column 11, :meta {:file "C:\\Workspaces\\Tom\\clojurescript_puzzle\\src\\puzzle\\model.cljs", :line 57, :column 6, :end-line 57, :end-column 11}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :shouldBe :x :butIs}, :order [:x :y :shouldBe :butIs]}, :doc nil}