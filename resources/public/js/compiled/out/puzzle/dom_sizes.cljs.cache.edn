{:rename-macros {}, :renames {}, :use-macros {sel1 dommy.core, sel dommy.core}, :excludes #{}, :name puzzle.dom_sizes, :imports nil, :requires {model puzzle.model, puzzle.model puzzle.model, dommy dommy.core, dommy.core dommy.core}, :uses nil, :defs {busy {:name puzzle.dom_sizes/busy, :file "src\\puzzle\\dom_sizes.cljs", :line 7, :column 1, :end-line 7, :end-column 14, :meta {:file "C:\\Workspaces\\Tom\\clojurescript_puzzle\\src\\puzzle\\dom_sizes.cljs", :line 7, :column 10, :end-line 7, :end-column 14}}, referenceToInterval {:name puzzle.dom_sizes/referenceToInterval, :file "src\\puzzle\\dom_sizes.cljs", :line 8, :column 1, :end-line 8, :end-column 29, :meta {:file "C:\\Workspaces\\Tom\\clojurescript_puzzle\\src\\puzzle\\dom_sizes.cljs", :line 8, :column 10, :end-line 8, :end-column 29}}, getTileHeight {:protocol-inline nil, :meta {:file "C:\\Workspaces\\Tom\\clojurescript_puzzle\\src\\puzzle\\dom_sizes.cljs", :line 10, :column 7, :end-line 10, :end-column 20, :arglists (quote ([]))}, :name puzzle.dom_sizes/getTileHeight, :variadic false, :file "src\\puzzle\\dom_sizes.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, getTileWidth {:protocol-inline nil, :meta {:file "C:\\Workspaces\\Tom\\clojurescript_puzzle\\src\\puzzle\\dom_sizes.cljs", :line 14, :column 7, :end-line 14, :end-column 19, :arglists (quote ([]))}, :name puzzle.dom_sizes/getTileWidth, :variadic false, :file "src\\puzzle\\dom_sizes.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, getTileLeft {:protocol-inline nil, :meta {:file "C:\\Workspaces\\Tom\\clojurescript_puzzle\\src\\puzzle\\dom_sizes.cljs", :line 18, :column 7, :end-line 18, :end-column 18, :arglists (quote ([tile]))}, :name puzzle.dom_sizes/getTileLeft, :variadic false, :file "src\\puzzle\\dom_sizes.cljs", :end-column 18, :method-params ([tile]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tile]))}, getTileTop {:protocol-inline nil, :meta {:file "C:\\Workspaces\\Tom\\clojurescript_puzzle\\src\\puzzle\\dom_sizes.cljs", :line 22, :column 7, :end-line 22, :end-column 17, :arglists (quote ([tile]))}, :name puzzle.dom_sizes/getTileTop, :variadic false, :file "src\\puzzle\\dom_sizes.cljs", :end-column 17, :method-params ([tile]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tile]))}, getAnimStyle {:protocol-inline nil, :meta {:file "C:\\Workspaces\\Tom\\clojurescript_puzzle\\src\\puzzle\\dom_sizes.cljs", :line 26, :column 7, :end-line 26, :end-column 19, :arglists (quote ([oldTile newTile]))}, :name puzzle.dom_sizes/getAnimStyle, :variadic false, :file "src\\puzzle\\dom_sizes.cljs", :end-column 19, :method-params ([oldTile newTile]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([oldTile newTile]))}, animate {:protocol-inline nil, :meta {:file "C:\\Workspaces\\Tom\\clojurescript_puzzle\\src\\puzzle\\dom_sizes.cljs", :line 37, :column 7, :end-line 37, :end-column 14, :arglists (quote ([id style oldTile newTile]))}, :name puzzle.dom_sizes/animate, :variadic false, :file "src\\puzzle\\dom_sizes.cljs", :end-column 14, :method-params ([id style oldTile newTile]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 4, :fn-var true, :arglists (quote ([id style oldTile newTile]))}, forStep {:protocol-inline nil, :meta {:file "C:\\Workspaces\\Tom\\clojurescript_puzzle\\src\\puzzle\\dom_sizes.cljs", :line 49, :column 13, :end-line 49, :end-column 20, :arglists (quote ([]))}, :name puzzle.dom_sizes/forStep, :variadic false, :file "src\\puzzle\\dom_sizes.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 7, :line 49, :end-line 49, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {dommy dommy.core, dommy.core dommy.core}, :cljs.analyzer/constants {:seen #{:y :style :x}, :order [:y :x :style]}, :doc nil}